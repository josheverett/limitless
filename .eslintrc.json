{
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "rules": {
    "comma-dangle": ["error", "always-multiline"],
    "import/order": ["error", {
      "groups": ["builtin", "external", "internal"],
      "pathGroups": [
        { "group": "external", "position": "before", "pattern": "react" },
        { "group": "external", "position": "before", "pattern": "next" },
        { "group": "external", "position": "before", "pattern": "next/**" },
        { "group": "external", "position": "before", "pattern": "[a-z]*" },
        { "group": "external", "position": "before", "pattern": "@**" },
        { "group": "internal", "position": "before", "pattern": "**/types/**" },
        { "group": "internal", "position": "before", "pattern": "**/context/**" },
        { "group": "internal", "position": "before", "pattern": "**/lib/**" },
        { "group": "internal", "position": "before", "pattern": "**/hooks/**" },
        { "group": "internal", "position": "before", "pattern": "**/layouts/**" },
        { "group": "internal", "position": "before", "pattern": "**/components/**" },
        { "group": "internal", "position": "before", "pattern": "**/3d/**" },
        { "group": "internal", "position": "before", "pattern": "**/public/**" },
        // This last pattern isn't working, even with `after`, dunno why.
        { "group": "internal", "position": "before", "pattern": "**/styles/**" }
      ],
      "pathGroupsExcludedImportTypes": ["react"],
      "alphabetize": {
        "order": "asc",
        "caseInsensitive": true
      }
    }],
    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 1, "maxBOF": 0 }],
    "quotes": [
      "error",
      "single",
      { "avoidEscape": true, "allowTemplateLiterals": true }
    ],
    "react/jsx-indent": ["error", 2],
    "react/jsx-indent-props": ["error", 2],
    "react/jsx-closing-bracket-location": ["error", {
      "nonEmpty": false,
      "selfClosing": "tag-aligned"
    }],
    "react/jsx-closing-tag-location": "error",
    "react/no-unescaped-entities": "error",
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ]
  }
}
