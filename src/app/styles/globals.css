@tailwind base;

/*
  Only tailwind's reset is used for this project.
  Everything else is emotion css.
*/

/* TODO: Optimize the bg images, use webp. */

:root {
  --halo-white: #f4f4f4;
  --halo-offwhite: #dedede;
}

/* All the emotion css stuff renders on the client, so we need some styles
   to bootstrap <html> and <body> and <main> with proper dimensions. */

html {
  width: 100%;
  height: 100%;
  overflow: hidden;
}

body {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  font-size: 2vh; /* meaningless arbitrary default */
  color: var(--halo-white); /* meaingingless arbitrary default */
  background: black;
  overflow: hidden; /* this was needed for mobile viewports to behave */
}

body.force4k {
  background-image: url('/background.jpg');
}

main {
  position: relative;
  width: 100%;
  height: 100%;
  background: transparent center / cover no-repeat;
}

main.start-screen {
  background-color: black;
  background-image: url("/start-screen/bg.webp");
}

a {
  outline: none;
}

.resize-container {
  width: 100%;
  height: 100%;
  background: black;
  /* This is the shadow for the canvas when in forced 4k mode. */
  box-shadow: 0 0 120px 30px hsla(0, 0%, 0%, 0.8);
  overflow: hidden;
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

.truncate {
  width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.material-icon-svg {
  width: 100%;
  height: 100%;
  fill: currentColor;
}

/**
 * threejs
 */

/* This is needed due to the forced 4k mode as threejs' built-in resizer
   doesn't account for the transform:scale(). */
canvas[data-engine] {
  width: 100% !important;
  height: 100% !important;
}
